//Code that came with the page.js file inside the return statement
Code that came with the file
<main className={styles.main}>
      <div className={styles.description}>
        <p>
          Get started by editing&nbsp;
          <code className={styles.code}>src/app/page.js</code>
        </p>
        <div>
          <a
            href="https://vercel.com?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            By{" "}
            <Image
              src="/vercel.svg"
              alt="Vercel Logo"
              className={styles.vercelLogo}
              width={100}
              height={24}
              priority
            />
          </a>
        </div>
      </div>

      <div className={styles.center}>
        <Image
          className={styles.logo}
          src="/next.svg"
          alt="Next.js Logo"
          width={180}
          height={37}
          priority
        />
      </div>

      <div className={styles.grid}>
        <a
          href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
          className={styles.card}
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2>
            Docs <span>-&gt;</span>
          </h2>
          <p>Find in-depth information about Next.js features and API.</p>
        </a>

        <a
          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
          className={styles.card}
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2>
            Learn <span>-&gt;</span>
          </h2>
          <p>Learn about Next.js in an interactive course with&nbsp;quizzes!</p>
        </a>

        <a
          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
          className={styles.card}
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2>
            Templates <span>-&gt;</span>
          </h2>
          <p>Explore starter templates for Next.js.</p>
        </a>

        <a
          href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template&utm_campaign=create-next-app"
          className={styles.card}
          target="_blank"
          rel="noopener noreferrer"
        >
          <h2>
            Deploy <span>-&gt;</span>
          </h2>
          <p>
            Instantly deploy your Next.js site to a shareable URL with Vercel.
          </p>
        </a>
      </div>
    </main>


//global.css old text
/* :root {
  --max-width: 1100px;
  --border-radius: 12px;
  --font-mono: ui-monospace, Menlo, Monaco, "Cascadia Mono", "Segoe UI Mono",
    "Roboto Mono", "Oxygen Mono", "Ubuntu Monospace", "Source Code Pro",
    "Fira Mono", "Droid Sans Mono", "Courier New", monospace;

  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;

  --primary-glow: conic-gradient(
    from 180deg at 50% 50%,
    #16abff33 0deg,
    #0885ff33 55deg,
    #54d6ff33 120deg,
    #0071ff33 160deg,
    transparent 360deg
  );
  --secondary-glow: radial-gradient(
    rgba(255, 255, 255, 1),
    rgba(255, 255, 255, 0)
  );

  --tile-start-rgb: 239, 245, 249;
  --tile-end-rgb: 228, 232, 233;
  --tile-border: conic-gradient(
    #00000080,
    #00000040,
    #00000030,
    #00000020,
    #00000010,
    #00000010,
    #00000080
  );

  --callout-rgb: 238, 240, 241;
  --callout-border-rgb: 172, 175, 176;
  --card-rgb: 180, 185, 188;
  --card-border-rgb: 131, 134, 135;
} */

/* @media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;

    --primary-glow: radial-gradient(rgba(1, 65, 255, 0.4), rgba(1, 65, 255, 0));
    --secondary-glow: linear-gradient(
      to bottom right,
      rgba(1, 65, 255, 0),
      rgba(1, 65, 255, 0),
      rgba(1, 65, 255, 0.3)
    );

    --tile-start-rgb: 2, 13, 46;
    --tile-end-rgb: 2, 5, 19;
    --tile-border: conic-gradient(
      #ffffff80,
      #ffffff40,
      #ffffff30,
      #ffffff20,
      #ffffff10,
      #ffffff10,
      #ffffff80
    );

    --callout-rgb: 20, 20, 20;
    --callout-border-rgb: 108, 108, 108;
    --card-rgb: 100, 100, 100;
    --card-border-rgb: 200, 200, 200;
  }
} */

/* html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
} */

// 'use client'

// import { useState, useEffect } from 'react'
// import { Box, Stack, Typography, Button, Modal, TextField } from '@mui/material'
// import { firestore } from '@/firebase'
// import {
//   collection,
//   doc,
//   getDocs,
//   query,
//   setDoc,
//   deleteDoc,
//   getDoc,
// } from 'firebase/firestore'

// const style = {
//   position: 'absolute',
//   top: '50%',
//   left: '50%',
//   transform: 'translate(-50%, -50%)',
//   width: 400,
//   bgcolor: 'white',
//   border: '2px solid #000',
//   boxShadow: 24,
//   p: 4,
//   display: 'flex',
//   flexDirection: 'column',
//   gap: 3,
// }

// export default function Home() {
//   // We'll add our component logic here
//   const [inventory, setInventory] = useState([])
//   const [open, setOpen] = useState(false)
//   const [itemName, setItemName] = useState('')

//   const updateInventory = async () => {
//     const snapshot = query(collection(firestore, 'inventory'))
//     const docs = await getDocs(snapshot)
//     const inventoryList = []
//     docs.forEach((doc) => {
//       inventoryList.push({ name: doc.id, ...doc.data() })
//     })
//     setInventory(inventoryList)
//   }
  
//   const addItem = async (item) => {
//     const docRef = doc(collection(firestore, 'inventory'), item)
//     const docSnap = await getDoc(docRef)
//     if (docSnap.exists()) {
//       const { quantity } = docSnap.data()
//       await setDoc(docRef, { quantity: quantity + 1 })
//     } 
//     else {
//       await setDoc(docRef, { quantity: 1 })
//     }
//     await updateInventory()
//   }
  
//   const removeItem = async (item) => {
//     const docRef = doc(collection(firestore, 'inventory'), item)
//     const docSnap = await getDoc(docRef)
//     if (docSnap.exists()) {
//       const { quantity } = docSnap.data()
//       if (quantity === 1) {
//         await deleteDoc(docRef)
//       }
//       else {
//         await setDoc(docRef, { quantity: quantity - 1 })
//       }
//     }
//     await updateInventory()
//   }
  
//   useEffect(() => {
//     updateInventory()
//   }, [])

//   const handleOpen = () => setOpen(true)
//   const handleClose = () => setOpen(false)

//   return (
//     <Box
//       width="100vw"
//       height="100vh"
//       display={'flex'}
//       justifyContent={'center'}
//       flexDirection={'column'}
//       alignItems={'center'}
//       gap={2}
//     >
//       <Modal
//         open={open}
//         onClose={handleClose}
//         aria-labelledby="modal-modal-title"
//         aria-describedby="modal-modal-description"
//       >
//         <Box sx={style}>
//           <Typography id="modal-modal-title" variant="h6" component="h2">
//             Add Item
//           </Typography>
//           <Stack width="100%" direction={'row'} spacing={2}>
//             <TextField
//               id="outlined-basic"
//               label="Item"
//               variant="outlined"
//               fullWidth
//               value={itemName}
//               onChange={(e) => setItemName(e.target.value)}
//             />
//             <Button
//               variant="outlined"
//               onClick={() => {
//                 addItem(itemName)
//                 setItemName('')
//                 handleClose()
//               }}
//             >
//               Add
//             </Button>
//           </Stack>
//         </Box>
//       </Modal>
//       <Button variant="contained" onClick={handleOpen}>
//         Add New Item
//       </Button>
//       <Box border={'1px solid #333'}>
//         <Box
//           width="800px"
//           height="100px"
//           bgcolor={'#ADD8E6'}
//           display={'flex'}
//           justifyContent={'center'}
//           alignItems={'center'}
//         >
//           <Typography variant={'h2'} color={'#333'} textAlign={'center'}>
//             Inventory Items
//           </Typography>
//         </Box>
//         <Stack width="800px" height="300px" spacing={2} overflow={'auto'}>
//           {inventory.map(({name, quantity}) => (
//             <Box
//               key={name}
//               width="100%"
//               minHeight="150px"
//               display={'flex'}
//               justifyContent={'space-between'}
//               alignItems={'center'}
//               bgcolor={'#f0f0f0'}
//               paddingX={5}
//             >
//               <Typography variant={'h3'} color={'#333'} textAlign={'center'}>
//                 {name.charAt(0).toUpperCase() + name.slice(1)}
//               </Typography>
//               <Typography variant={'h3'} color={'#333'} textAlign={'center'}>
//                 Quantity: {quantity}
//               </Typography>
//               <Button variant="contained" onClick={() => removeItem(name)}>
//                 Remove
//               </Button>
//             </Box>
//           ))}
//         </Stack>
//       </Box>
//     </Box>
//   )
// }


// {/* <Box
//       width="100vw"
//       height="100vh"
//       display={'flex'}
//       justifyContent={'center'}
//       flexDirection={'column'}
//       alignItems={'center'}
//       gap={2}
//     >
//       <Modal
//         open={open}
//         onClose={handleClose}
//         aria-labelledby="modal-modal-title"
//         aria-describedby="modal-modal-description"
//       >
//         <Box sx={style}>
//           <Typography id="modal-modal-title" variant="h6" component="h2">
//             Add Item
//           </Typography>
//           <Stack width="100%" direction={'row'} spacing={2}>
//             <TextField
//               id="outlined-basic"
//               label="Item"
//               variant="outlined"
//               fullWidth
//               value={itemName}
//               onChange={(e) => setItemName(e.target.value)}
//             />
//             <Button
//               variant="outlined"
//               onClick={() => {
//                 addItem(itemName)
//                 setItemName('')
//                 handleClose()
//               }}
//             >
//               Add
//             </Button>
//           </Stack>
//         </Box>
//       </Modal>
//       <Button variant="contained" onClick={handleOpen}>
//         Add New Item
//       </Button>
//       <Box border={'1px solid #333'}>
//         <Box
//           width="800px"
//           height="100px"
//           bgcolor={'#ADD8E6'}
//           display={'flex'}
//           justifyContent={'center'}
//           alignItems={'center'}
//         >
//           <Typography variant={'h2'} color={'#333'} textAlign={'center'}>
//             Inventory Items
//           </Typography>
//         </Box>
//         <Stack width="800px" height="300px" spacing={2} overflow={'auto'}>
//           {inventory.map(({name, quantity}) => (
//             <Box
//               key={name}
//               width="100%"
//               minHeight="150px"
//               display={'flex'}
//               justifyContent={'space-between'}
//               alignItems={'center'}
//               bgcolor={'#f0f0f0'}
//               paddingX={5}
//             >
//               <Typography variant={'h3'} color={'#333'} textAlign={'center'}>
//                 {name.charAt(0).toUpperCase() + name.slice(1)}
//               </Typography>
//               <Typography variant={'h3'} color={'#333'} textAlign={'center'}>
//                 Quantity: {quantity}
//               </Typography>
//               <Button variant="contained" onClick={() => removeItem(name)}>
//                 Remove
//               </Button>
//             </Box>
//           ))}
//         </Stack>
//       </Box>
//     </Box> */}